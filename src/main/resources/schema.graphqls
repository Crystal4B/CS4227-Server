scalar Date

type User
{
	id: ID!
	type: String
	email: String
	username: String
	password: String
}

type Guest
{
	id: ID!
	firstName: String!
	lastName: String!
	room: Room!
}

type Reservation
{
	id: ID!
	checkIn: Date!
	checkOut: Date!
	user: User
	guests: [Guest]
	paid: Boolean
}

type Room
{
	id: ID
	type: String
	perks: String
	numberOfBeds: Int
	rate: Int
}

type Voucher
{
	id: ID
	type: String
	amount: Float
	issue_date: Date!
	expiry_date: Date!
	creator: User
	available: Reservation
}

input UserInput
{
	id: ID
	type: String
	email: String
	username: String
	password: String
}

input GuestInput
{
	id: ID
	firstName: String
	lastName: String
	roomId: ID
}

input ReservationInput
{
	id: ID
	checkIn: Date
	checkOut: Date
	user: UserInput
	guests: [GuestInput]
	paid: Boolean
}

input RoomInput
{
	id: ID
	type: String
	perks: String
	numberOfBeds: Int
	rate: Int
}

input VoucherCreationInput
{
	issue_date: Date
	expiry_date: Date
	type: String
	amount: Float
	creator: UserInput!
}

input VoucherInput
{
	id: ID
	type: String
	amount: Float
	issue_date: Date!
	expiry_date: Date!
	creator: UserInput
	available: ReservationInput
}

type Query
{
	validateVoucher(id: ID!): Voucher
	reservationById(id: ID!): Reservation
	reservationsByUser(input: UserInput!): [Reservation]
	allRooms: [Room]
	roomById(id: ID!): Room
	availableRoomsByDates(checkIn: Date!, checkOut: Date!): [Room]
	loginUser(input: UserInput): User

}

type Mutation
{
	createVoucher(input: VoucherCreationInput): Voucher
	removeVoucher(id: ID): Voucher
	updateVoucher(id: ID, voucher: VoucherInput): Voucher
	createReservation(input: ReservationInput): Reservation
	updateReservationPaid(input: ReservationInput): Reservation
	removeReservation(input: ReservationInput): Reservation
	createRoom(input: RoomInput): Room
	createRooms(input: [RoomInput]): [Room]
	removeRoom(input: RoomInput): Room
	removeRooms(input: [RoomInput]): [Room]
	createUser(input: UserInput): User
	removeUser(input: UserInput): User
}